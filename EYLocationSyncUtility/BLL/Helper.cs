using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Mail;
using System.Text;
using System.Threading.Tasks;
using System.Configuration;
using EYLocationSyncUtility.BEL;
using log4net;
using log4net.Repository.Hierarchy;
using log4net.Appender;

namespace EYLocationSyncUtility.BLL
{
    /// <summary>
    /// Provides methods containing all helper methods 
    /// </summary>
    public class Helper
    {
        #region Private member

        // Email Config Data
        private String dbConnection;
        private String SyncLastRunDate;
        //Logger object
        private static ILog logger = LogManager.GetLogger("Job");
        #endregion

        #region Public method
        /// <summary>
        /// Process started Email routine
        /// </summary>
        /// <param name="">status</param>
        /// <returns></returns>
        public void AdminEmail(string status)
        {
            //Subject of Mail
            string subject = "HPE CM Sync Utility updates";

            //Body of Mail
            StringBuilder msgBuilder = null;
            msgBuilder = new StringBuilder();
            msgBuilder.Append("Dear Admin,<br />");
            msgBuilder.Append("HPE CM  Sync Utility process has " + status + ".<br />");
            msgBuilder.Append("<br />");
            msgBuilder.Append("This E-mail Message has been automatically generated by HPE CM EY Sync Utility.");

            //Send Exception Mail to admin
            SendEmail(subject, msgBuilder.ToString());
        }
        /// <summary>
        /// Method to send mail if process is in not ready state
        /// </summary>
        /// <param name="">interfaceType</param>
        /// <returns></returns>
        public void ProcessNotInReadyStateFor(string interfaceType)
        {
            //Subject of Mail
            string subject = "HPE CM Sync Utility updates";

            //Body of Mail
            StringBuilder msgBuilder = null;
            msgBuilder = new StringBuilder();
            msgBuilder.Append("Dear Admin,<br />");
            msgBuilder.Append(interfaceType + " Sync process could not start. As per the status flag in EY status table – "+interfaceType+" data in staging table is not yet ready for processing.<br />");
            msgBuilder.Append("<br />");
            msgBuilder.Append("This E-mail Message has been automatically generated by HPE CM EY Sync Utility.");

            //Send Exception Mail to admin
            SendEmail(subject, msgBuilder.ToString());
        }
        /// <summary>
        /// Email routine for status report
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public void ReportEmail()
        {
            //log file path
            string path = null;
            if (LogManager.GetCurrentLoggers().Length > 0 && LogManager.GetCurrentLoggers()[0].Logger.Repository.GetAppenders().Length > 0)
            {
                path = (LogManager.GetCurrentLoggers()[0].Logger.Repository.GetAppenders()[0] as FileAppender).File;
            }
            //Subject of Mail
            string subject = "HPE CM Sync Utility updates";

            //Body of Mail
            StringBuilder msgBuilder = null;
            msgBuilder = new StringBuilder();
            msgBuilder.Append("Dear Admin,<br />");
            msgBuilder.Append("Below is the summary of Client,Employee,Partner and user data processed by HPE CM Sync Utility in HPE CM system at EY on "+ DateTime.Now +" <br />");
            msgBuilder.Append("<br />");
            
            //Summary of Creation and updation process

            if (!Report.IsClientCreated)
            {
                msgBuilder.Append("Below create or update operation could not be accomplished successfully due to SQL server issues.<br />");
                msgBuilder.Append("<B>Client creation process failed completely.</B><br />");
            }
            if (!Report.IsClientUpdated)
            {
                msgBuilder.Append("Below create or update operation could not be accomplished successfully due to SQL server issues.<br />");
                msgBuilder.Append("<B>Client update process failed completely.</B><br />");
            }
            if (!Report.IsUserCreated)
            {
                msgBuilder.Append("Below create or update operation could not be accomplished successfully due to SQL server issues.<br />");
                msgBuilder.Append("<B>User creation process failed completely.</B><br />");
            }
            if (!Report.IsUserUpdated)
            {
                msgBuilder.Append("Below create or update operation could not be accomplished successfully due to SQL server issues.<br />");
                msgBuilder.Append("<B>User update process failed completely.</B><br />");
            }
            if (!Report.IsClientRecordCreated)
            {
                msgBuilder.Append("Below create or update operation could not be accomplished successfully due to SQL server issues.<br />");
                msgBuilder.Append("<B>Client record creation process failed completely.</B><br />");
            }
            if (!Report.IsClientRecordUpdated)
            {
                msgBuilder.Append("Below create or update operation could not be accomplished successfully due to SQL server issues.<br />");
                msgBuilder.Append("<B>Client record update process failed completely.</B><br />");
            }
            if (!Report.IsEmployeeRecordCreated)
            {
                msgBuilder.Append("Below create or update operation could not be accomplished successfully due to SQL server issues.<br />");
                msgBuilder.Append("<B>Employee record creation process failed completely.</B><br />");
            }
            if (!Report.IsEmployeeRecordUpdated)
            {
                msgBuilder.Append("Below create or update operation could not be accomplished successfully due to SQL server issues.<br />");
                msgBuilder.Append("<B>Employee record update process failed completely.</B><br />");
            }
            if (!Report.IsPartnerRecordCreated)
            {
                msgBuilder.Append("Below create or update operation could not be accomplished successfully due to SQL server issues.<br />");
                msgBuilder.Append("<B>Partner record creation process failed completely.</B><br />");
            }
            if (!Report.IsPartnerRecordUpdated)
            {
                msgBuilder.Append("Below create or update operation could not be accomplished successfully due to SQL server issues.<br />");
                msgBuilder.Append("<B>Partner record update process failed completely.</B><br />");
            }


            msgBuilder.Append("<br />");
            msgBuilder.Append("<table border='1'>");
            msgBuilder.Append("<tr><Th>Sync Activity</Th><Th>Records Fetched From The EY Staging DB</Th><Th>Records Processed Successfully in HPE CM</Th><Th>Records For Which Processing Failed in HPE CM</Th><Th>Records For Which Duplicate Exception Captured</Th><Th>Records For Which IsUpdatedInRM flag Could Not be Set</Th></tr>");
            msgBuilder.Append("<tr><Th>New Clients Created in HPE CM</Th><Td>" + Report.totalClientCreate + "</Td><Td>" + Report.clientCreated + "</Td><Td>" + Report.clientNotCreated + "</Td><Td>"+ Report.duplicateClient +"</Td><Td>"+Report.clientIsUpdateRMCreate+"</Td></tr>");
            msgBuilder.Append("<tr><Th>Existing Clients Updated in HPE CM</Th><Td>" + Report.totalClientUpdate + "</Td><Td>" + Report.clientUpdated + "</Td><Td>" + Report.clientNotUpdated + "</Td><Td>NA</Td><Td>" + Report.clientIsUpdateRMUpdate + "</Td></tr>");
            msgBuilder.Append("<tr><Th>New Users Created in HPE CM</Th><Td>" + Report.totalUserCreate + "</Td><Td>" + Report.userCreated + "</Td><Td>" + Report.userNotCreated + "</Td><Td>" + Report.duplicateUser + "</Td><Td>" + Report.userIsUpdateRMCreate + "</Td></tr>");
            msgBuilder.Append("<tr><Th>Existing Users Updated in HPE CM</Th><Td>" + Report.totalUserUpdate + "</Td><Td>" + Report.userUpdated + "</Td><Td>" + Report.userNotUpdated + "</Td><Td>NA</Td><Td>" + Report.userIsUpdateRMUpdate + "</Td></tr>");
            msgBuilder.Append("<tr><Th>New Client Records Created in HPE CM</Th><Td>" + Report.TotalClientRecordCreate + "</Td><Td>" + Report.ClientRecordCreated + "</Td><Td>" + Report.ClientRecordNotCreated + "</Td><Td>" + Report.DuplicateClientRecord + "</Td><Td>" + Report.ClientRecordIsUpdateRMCreate + "</Td></tr>");
            msgBuilder.Append("<tr><Th>Existing Client Records Updated in HPE CM</Th><Td>" + Report.TotalClientRecordUpdate + "</Td><Td>" + Report.ClientRecordUpdated + "</Td><Td>" + Report.ClientRecordNotUpdated + "</Td><Td>NA</Td><Td>" + Report.ClientRecordIsUpdateRMUpdate + "</Td></tr>");
            msgBuilder.Append("<tr><Th>New Employee Records Created in HPE CM</Th><Td>" + Report.TotalEmployeeRecordCreate + "</Td><Td>" + Report.EmployeeRecordCreated + "</Td><Td>" + Report.EmployeeRecordNotCreated + "</Td><Td>" + Report.DuplicateEmployeeRecord + "</Td><Td>" + Report.EmployeeRecordIsUpdateRMCreate + "</Td></tr>");
            msgBuilder.Append("<tr><Th>Existing Employee Records Updated in HPE CM</Th><Td>" + Report.TotalEmployeeRecordUpdate + "</Td><Td>" + Report.EmployeeRecordUpdated + "</Td><Td>" + Report.EmployeeRecordNotUpdated + "</Td><Td>NA</Td><Td>" + Report.EmployeeRecordIsUpdateRMUpdate + "</Td></tr>");
            msgBuilder.Append("<tr><Th>New Partner Records Created in HPE CM</Th><Td>" + Report.TotalPartnerRecordCreate + "</Td><Td>" + Report.PartnerRecordCreated + "</Td><Td>" + Report.PartnerRecordNotCreated + "</Td><Td>" + Report.DuplicatePartnerRecord + "</Td><Td>" + Report.PartnerRecordIsUpdateRMCreate + "</Td></tr>");
            msgBuilder.Append("<tr><Th>Existing Partner Records Updated in HPE CM</Th><Td>" + Report.TotalPartnerRecordUpdate + "</Td><Td>" + Report.PartnerRecordUpdated + "</Td><Td>" + Report.PartnerRecordNotUpdated + "</Td><Td>NA</Td><Td>" + Report.PartnerRecordIsUpdateRMUpdate + "</Td></tr>");
            msgBuilder.Append("</table>");
            msgBuilder.Append("<br />");
            if (!Report.IsClientStatusTableUpdated)
            {
                msgBuilder.Append("Though the Client data has been processed successfully in HPE CM, but after processing sync utility could not set flags 'IsReadyForProcessing' and 'SyncLastRunTime'. Please set these flags manually in 'StatusTable' with values False and " + DateTime.Now + " respectively.</br>");
            }
            if (!Report.IsUserStatusTableUpdated)
            {
                msgBuilder.Append("Though the User data has been processed successfully in HPE CM, but after processing sync utility could not set flags 'IsReadyForProcessing' and 'SyncLastRunTime'. Please set these flags manually in 'StatusTable' with values False and " + DateTime.Now + " respectively.</br>");
            }
            if (!Report.IsClientRecordStatusTableUpdated)
            {
                msgBuilder.Append("Though the Client Record data has been processed successfully in HPE CM, but after processing sync utility could not set flags 'IsReadyForProcessing' and 'SyncLastRunTime'. Please set these flags manually in 'StatusTable' with values False and " + DateTime.Now + " respectively.</br>");
            }
            if (!Report.IsEmployeeRecordStatusTableUpdated)
            {
                msgBuilder.Append("Though the Employee Record data has been processed successfully in HPE CM, but after processing sync utility could not set flags 'IsReadyForProcessing' and 'SyncLastRunTime'. Please set these flags manually in 'StatusTable' with values False and " + DateTime.Now + " respectively.</br>");
            }
            if (!Report.IsPartnerRecordStatusTableUpdated)
            {
                msgBuilder.Append("Though the Partner Record data has been processed successfully in HPE CM, but after processing sync utility could not set flags 'IsReadyForProcessing' and 'SyncLastRunTime'. Please set these flags manually in 'StatusTable' with values False and " + DateTime.Now + " respectively.</br>");
            }
            msgBuilder.Append("<br />");
            msgBuilder.Append("For more details please refer the log file information. Log file can be found at below location on the server where HPE CM Sync Utility is running. <br />");
            msgBuilder.Append(path);
            msgBuilder.Append("<br />");
            msgBuilder.Append("<br />");
            msgBuilder.Append("<br />");
            msgBuilder.Append("This E-mail Message has been automatically generated by HPE CM EY Sync Utility.");

            //Send Exception Mail to admin
            SendEmail(subject, msgBuilder.ToString());
        }
        /// <summary>
        /// Email routine
        /// </summary>
        /// <param name="">exception</param>
        /// <returns></returns>
        public void ExceptionEmail(String exception)
        {
            //Subject of Mail
            string subject="HPE CM Sync Utility Incident/ Error Notification";

            //Details of the Exception will be appended to stringbuilder
            StringBuilder msgBuilder = null;
            msgBuilder = new StringBuilder();
            msgBuilder.Append("Dear Admin,<br />");
            msgBuilder.Append("HPE CM Ey Sync Utility has encountered an error.<br />");
            msgBuilder.Append("Please refer below exception/ error details for more information.<br />");
            msgBuilder.Append("<br />");
            msgBuilder.Append("<B><U>Exception/ Error Details:</U></B><br />");
            msgBuilder.Append("<B>" + exception + "</B><br />");
            msgBuilder.Append("<br />");
            msgBuilder.Append("This E-mail Message has been automatically generated by HPE CM EY Sync Utility.");

            //Send Exception Mail to admin
            SendEmail(subject, msgBuilder.ToString());
        }
        #endregion

        #region private method
        /// <summary>
        /// Email routine
        /// </summary>
        /// <param name="subject,body"></param>
        /// <returns></returns>
        private void SendEmail(string subject,string body)
        {
            return;
            //From address to null
            MailAddress from = null;

            //To address to null
            MailAddress to = null;

            //Message to null
            MailMessage message = null;

            //SMTP client to null
            SmtpClient client = null;

            try
            {
                //Get From Email address
                from = new MailAddress(ConfigurationManager.AppSettings["FromAddress"], "");

                //Get To Email address
                to = new MailAddress(ConfigurationManager.AppSettings["ToAddress"]);

                //Create MailMessage object
                message = new MailMessage(from, to);

                //Set Suject of Mail
                message.Subject = subject;

                //Appending the details to be displayed on the Email.
                message.IsBodyHtml = true;
                
                //Set Body of Mail
                message.Body = body;

                //Intialize SMTP client object
                client = new SmtpClient(ConfigurationManager.AppSettings["SmtpServer"], Int16.Parse(ConfigurationManager.AppSettings["SmtpPort"]));
                
                //sends the email with the message
                client.Send(message);
            }
            catch (Exception ex)
            {
                logger.Error("EMAIL Error : " + ex.Message);
            }

        }
        #endregion
    }
}
